config {
    type: "incremental",
    schema: constants.DASHBOARDS_DATASET,
    description: "This table includes all events connected to applications",
    tags: ["all"],
    bigquery: {
      partitionBy: "date"
  }
}


pre_operations {
  declare event_date_checkpoint default (
    ${when(incremental(),
      `select max(date) -3 from ${self()}`,
      `select cast('${constants.START_DATE}' as date format 'yyyymmdd')`)
    }
  )
  ---
  ${when(incremental(),
    `delete from ${self()} where date >= event_date_checkpoint`)
  }
}

with pre_applications as (
  select
    * except (event_date, event_name, event_previous_timestamp, event_bundle_sequence_id, event_server_timestamp_offset, user_id, user_pseudo_id, user_first_touch_timestamp, geo, app_info, is_active_user, traffic_source, stream_id, platform, ecommerce, ga_session_id, ga_session_number, engagement_time_msec, page_title, page_referrer, session_engaged, event_datetime,  user_key, ga_session_key, event_traffic_source, collected_traffic_source, last_non_direct_traffic_source, device),
    event_date as date,
    device.category as device,


case /* edit this to edit which event_name and page is associated with which type of product */
      when regexp_contains(event_params.insurance_product, 'bil') or regexp_contains(page_location, '\\/bilforsakring') then 'Bilsförsäkring'
      when regexp_contains(event_params.insurance_product, 'hyresrätt') or regexp_contains(page_location, '\\/hyresratt') then 'Hyresrättsförsäkring'
      when regexp_contains(event_params.insurance_product, 'villa och hus') or regexp_contains(page_location, '\\/hus-och-villa') then 'Villa- och husförsäkring'
      when regexp_contains(event_params.insurance_product, 'bostadsrätt') or regexp_contains(page_location, '\\/bostadsratt') then 'Bostadsrättsförsäkring'

      when regexp_contains(event_params.insurance_product, 'fritidshus') or regexp_contains(page_location, '\\/fritidshus') then 'Fritidshusförsäkring'

      when regexp_contains(page_location, '\\/student') then 'Studenthemförsäkring'
      when regexp_contains(event_params.insurance_product, 'liv') or regexp_contains(page_location, '\\/livforsakring') then 'Livförsäkring'
      when regexp_contains(event_params.insurance_product, 'olycksfall') or regexp_contains(page_location, '\\/olycksfallsforsakring') then 'Olycksfallsförsäkring'
      when regexp_contains(event_params.insurance_product, 'barn') or regexp_contains(page_location, '\\/barnforsakring') then 'Barnförsäkring'
      when regexp_contains(event_params.insurance_product, 'gravid') or regexp_contains(page_location, '\\/gravidforsakring') then 'Gravidförsäkring'
      when regexp_contains(event_params.insurance_product, 'bolåneskydd') or regexp_contains(page_location, '\\/laneskydd') then 'Bolåneskydd'
      when regexp_contains(event_params.insurance_product, 'motorcykel') or regexp_contains(page_location, '\\/motorcykel') then 'MC-försäkring'
      when regexp_contains(event_params.insurance_product, 'moped') or regexp_contains(page_location, '\\/moped') then 'Mopedförsäkring'
      when regexp_contains(event_params.insurance_product, 'husbil') or regexp_contains(page_location, '\\/husbil') then 'Husbilsförsäkring'
      when regexp_contains(event_params.insurance_product, 'husvagn') or regexp_contains(page_location, '\\/husvagn') then 'Husvagnsförsäkring'
      when regexp_contains(event_params.insurance_product, 'slapvagn') or regexp_contains(page_location, '\\/slapvagn') then 'Släpvagnsförsäkring'
      when regexp_contains(event_params.insurance_product, 'snoskoter') or regexp_contains(page_location, '\\/snoskoter') then 'Snöskoterförsäkring'
      when regexp_contains(page_location, '\\/latt-lastbil-forsakring') then 'Lätt lastbilförsäkring'--finns inte i insurance_product

      when regexp_contains(event_params.insurance_product, 'båt') or regexp_contains(page_location, '\\/batforsakring') then 'Båtförsäkring'
      when regexp_contains(event_params.insurance_product, 'hund') or regexp_contains(page_location, '\\/hundforsakring') then 'Hundförsäkring'
      when regexp_contains(event_params.insurance_product, 'katt') or regexp_contains(page_location, '\\/kattforsakring') then 'Kattförsäkring'
     

     else null end as product_name,


case /* edit this to edit which event_name and page is associated with which type of product */
      when regexp_contains(event_params.insurance_product_category, 'fordon') or regexp_contains(page_location, '\\/bilforsakring|\\/andra-fordon') then 'Fodonförsäkring'

      when regexp_contains(event_params.insurance_product_category, 'boende') or regexp_contains(page_location, '\\/hemforsakring') then 'Hemförsäkring'

      when regexp_contains(event_params.insurance_product_category, 'person') or regexp_contains(page_location, '\\/person') then 'Personförsäkring'

      when regexp_contains(event_params.insurance_product_category, 'djur') or regexp_contains(page_location, '\\/djurforsakring') then 'Djurförsäkring'
     
     else null end as product_category_name,


    event_params.application_status AS application_status,
    event_name  as event_name,
  from
    ${ref('event')}
  where 
    event_date >= event_date_checkpoint
    --event_date = '2024-11-07' /* Simply for testing purposes */
    and not regexp_contains(page_location, 'sandbox')
),



sessions as (
  select
    session_start_date,
    concat(user_pseudo_id,ga_session_id) as session_id,
    pages_in_session,
    events_in_session,
    landing_page,
    concat(session_traffic_source_last_click.cross_channel_source, " / ", session_traffic_source_last_click.cross_channel_medium) as source_medium,
    session_traffic_source_last_click.cross_channel_default_channel_group as channel_group,
    session_traffic_source_last_click.cross_channel_campaign_name as campaign,
    session_traffic_source_last_click.manual_term as utm_term,
    session_traffic_source_last_click.manual_content as utm_content
  from
    ${ref('session')}
)

select
  a.date,
  a.device,
  a.page_location,
  a.session_id,
  a.event_timestamp,
  a.previous_page_location,
  a.next_page_location,
  a.product_name,
  a.product_category_name,
 
  a.application_status,
  a.event_name,
  s.* except (session_id, session_start_date, landing_page),
  regexp_extract(landing_page, r'[^/]+//[^/]+(/[^?]*)') as landing_page,
    a.event_params,
from
  pre_applications a
  join sessions s on a.session_id = s.session_id
where 
  source_medium != 'tagassistant.google.com / referral'
group by  
  date,
  device,
  page_location,
  a.session_id,
  event_timestamp,
  previous_page_location,
  next_page_location,
  a.product_name,
  a.product_category_name,
  a.event_params.step_title,
  application_status,
  event_name,
  pages_in_session,
  events_in_session,
  landing_page,
  source_medium,
  channel_group,
  campaign,
  utm_term,
  utm_content,
  a.event_params